import { Window } from "happy-dom";
import "../";

const window = new Window();
const document = window.document;
let {{varName name}};

beforeEach(() => {
	document.body.innerHTML ="<{{tagName name}} id=\"my-{{tagName name}}\">My Component</{{tagName name}}>";
	{{varName name}} = document.querySelector("#my-{{tagName name}}");
});
describe("Make sure component is created", () => {
	test("Make sure <{{tagName name}}> is defined as a custom element with shadowRoot", () => {
		expect({{varName name}}).not.toBeNull();
		expect({{varName name}}.shadowRoot).not.toBeNull();
	});
	test("Make sure <{{tagName name}}> has the elements as an attribute with the button on it", () => {
		expect({{varName name}}.elements).not.toBeNull();
		//check the elements properties existance here
	});
	test("Make sure component attributes are also reflected on object properties", () => {
		{{#each attributes}}
		expect("{{toProperty name}}" in {{varName ../name}}).toBe(true);
		{{/each}}
	});
});
describe("Testing <{{tagName name}}> attributes", () => {
	describe.each([
		{{#each attributes}}
		{{#notBoolean type}}
		["{{name}}", "{{toProperty name}}", ""],
		{{/notBoolean}}
		{{/each}}
	])("Testing %s attribute", (attributeName, propertyName, otherValue)=>{
		test(`Updating ${propertyName} property updates the attribute with the same value`, () => {
			{{varName name}}[propertyName] = otherValue;
			expect({{varName name}}.getAttribute(attributeName)).toBe(otherValue);
		});
		test(`Updating ${attributeName} attribute updates the property with the same value`, () => {
			{{varName name}}.setAttribute(attributeName, otherValue);
			expect({{varName name}}[propertyName]).toBe(otherValue);
		});
	});
	{{#hasBooleanAttribute attributes}}
	//Boolean attributes
	describe.each([
		{{#each attributes}}
		{{#isBoolean type}}
		["{{name}}", "{{toProperty name}}", true], 
		["{{name}}", "{{toProperty name}}", false],
		{{/isBoolean}}
		{{/each}}		
	])("Testing %s attribute", (attributeName, propertyName, value) => {
		test(`Set ${propertyName} property to ${value} -> ${value ? "adds" : "removes"} '${attributeName}' attribute to the <{{tagName name}}> element`, () => {
			{{varName name}}[propertyName] = value;
			expect({{varName name}}.hasAttribute(attributeName)).toBe(value);
		});
		test(`Set ${attributeName} attribute to ${value} -> ${value ? "adds" : "removes"} '${attributeName}' attribute from the <{{tagName name}}> element`, () => {
			{{varName name}}.setAttribute(attributeName, `${value}`);
			expect({{varName name}}.hasAttribute(attributeName)).toBe(value);
		});
	});
	{{/hasBooleanAttribute}}
//Test invalid values by ensuring that the change handler is never called
//	describe.each([
//		["ATTRIBUTE_NAME", "PROPERTY_NAME", "INVALID_VALUE"],
//	])("Testing invalid value handeling for %s", (attributeName, propertyName, invalidValue) => {
//		test(`Tesing invalid value for ${attributeName} attribute`, () => {
//			const spy = jest.spyOn({{varName name}}.attributesConfig[attributeName], "attributeChangedHandler");
//			{{varName name}}.setAttribute(attributeName, invalidValue);
//			expect(spy).not.toHaveBeenCalled();
//			spy.mockRestore();
//		});
//		test(`Tesing invalid value for ${propertyName} property`, () => {
//			const spy = jest.spyOn({{varName name}}.attributesConfig[attributeName], "attributeChangedHandler");
//			{{varName name}}[propertyName] = invalidValue;
//			expect(spy).not.toHaveBeenCalled();
//			spy.mockRestore();
//		});
//	});
});

// Test the public API
describe("Test public API", () => {
	describe("Make sure the methods are defined on the instance", () => {
		{{#each publicAPI}}
		test("make sure {{name}} function is actually defined on the class instance", () => {
			expect(typeof {{varName ../name}}.{{name}}).toBe("function");
		});
		{{/each}}
	});
	// Test each and every public API method by ensuring it works as expected
});
