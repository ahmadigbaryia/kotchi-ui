import keys from "lodash/keys";

import BaseElement from "Base/baseElement";
import attributesConfig, { tagName } from "./config";
import templateConfig from "./template";
import { defineCustomElement } from "Utils/wcUtils";


{{#if allowedChildren}}
const allowedChildren = [{{{joinArray allowedChildren}}}];
{{/if}}
{{#if allowedParents}}
const allowedParents = [{{{joinArray allowedParents}}}];
{{/if}}

/**
 * {{componentName name}} element
 */
class {{className name}} extends BaseElement {
	constructor() {
		super({ templateConfig, attributesConfig });
		this.elements = {};
	}
	static get observedAttributes() {
		return keys(attributesConfig);
	}
	static defineCustomElement() {
		if(!{{className name}}.defined){
			defineCustomElement({
				componentClass: {{className name}},
				tagName,
				attributesConfig
			});
			{{className name}}.defined = true;
		}
	}

	{{#if allowedParents}}
	connectedCallback() {
		super.connectedCallback({
			element: this,
			allowedParents
		});
	}
	{{/if}}
	{{#if allowedChildren}}
	connectedCallback() {
		super.connectedCallback({
			element: this.elements.YOUR_CONTAINER_ELEMENT, //TODO: change it to your container element
			allowedChildren
		});
	}

	childrenDefinedCallback({ children = [] } = {}) {
		this.childrenMap = {};
		this.children = children;
		for (let i = 0; i < children.length; i++) {
			const childNode = children[i];
			const childNodeId = childNode.getAttribute("id") || `childNode_${i}`;
			this.childrenMap[childNodeId] = childNode;
		}
	}
	{{/if}}
	{{#each publicAPI}}
	/**
	 * {{{description}}}
	 {{#each params}}
	 * @param { {{type}} } {{name}}		{{{description}}}
	 {{/each}}
	 {{#if returns}}
	 * @returns {{#if returns.type}}{ {{returns.type}} }{{/if}} {{{returns.description}}}
	 {{/if}}
	 * @memberof {{className ../name}}
	 */
	{{name}}({{joinParams params}}) {
		// auto-generated method
	}
	{{/each}}
}
export { {{className name}} as default, tagName };